<?php

namespace Application\Entity;

use Application\Interactor\Location;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Query\Expr\Join;

/**
 * ProfessionalUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProfessionalUserRepository extends EntityRepository
{
    /**
     * @param \Doctrine\ORM\EntityManager $em
     */
    public function __construct($em)
    {
        $entityName = 'Application\Entity\ProfessionalUser';
        $class = new ClassMetadata($entityName);

        parent::__construct($em, $class);
    }

    /**
     * @param Location $location
     * @param int      $limit
     *
     * @return array
     */
    public function getFeaturedProfessionalsByLocation(Location $location, $limit = 0)
    {
        if ($location->type == Location::TYPE_COUNTY) {
            return $this->getFeaturedProfessionalsOfCounty($location->name, $limit);
        }
        return $this->getFeaturedProfessionalsOfCity($location->name, $limit);
    }

    private function getFeaturedProfessionalsOfCounty($countyName, $limit)
    {
        return $this->createQueryBuilder('p')
            ->join('p.city', 'ci')
            ->join('ci.county', 'co', Join::WITH, 'co.name = :countyName')
            ->andWhere('p.enabled = :yes')
            ->andWhere(':now between p.featuredFrom and p.featuredTo')
            ->andWhere('ci.isBigCity <> :yes')
            ->andWhere('ci.isCapital <> :yes')
            ->setParameter('yes', 1)
            ->setParameter('now', new \DateTime('now'))
            ->setParameter('countyName', $countyName)
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    private function getFeaturedProfessionalsOfCity($cityName, $limit)
    {
        return $this->createQueryBuilder('p')
            ->join('p.city', 'ci', Join::WITH, 'ci.name like :cityName')
            ->andWhere(':now between p.featuredFrom and p.featuredTo')
            ->setParameter('now', new \DateTime('now'))
            ->setParameter('cityName', $cityName . '%')
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function hasServices($professionalId)
    {
        return (boolean)$this->_em->createQueryBuilder()
            ->select('count(s.id)')
            ->from($this->_entityName, 'p')
            ->join('p.serviceGroups', 'sg')
            ->join('sg.services', 's')
            ->andWhere('p.id = :professional_id')
            ->setParameter('professional_id', $professionalId)
            ->getQuery()->getSingleScalarResult();
    }

    public function professionalOwnsPhoto($professionalSlug, $photoId)
    {
        return (boolean)$this->_em->createQueryBuilder()
            ->select('count(p.id)')
            ->from($this->_entityName, 'p')
            ->join('p.gallery', 'g')
            ->join('g.galleryHasMedias', 'gm')
            ->join('gm.media', 'm')
            ->andWhere('p.slug = :professionalSlug')
            ->andWhere('m.id = :photoId')
            ->setParameter('professionalSlug', $professionalSlug)
            ->setParameter('photoId', $photoId)
            ->getQuery()->getSingleScalarResult();
    }
}
