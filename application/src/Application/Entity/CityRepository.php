<?php

namespace Application\Entity;
use Application\Interactor\Location;
use Application\Interactor\LocationRequest;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Query\Expr\Join;

/**
 * CityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct($em)
    {
        $entityName = 'Application\Entity\City';
        $class = new ClassMetadata($entityName);

        parent::__construct($em, $class);
    }

    public function getCapital()
    {
        return $this->createQueryBuilder('ci')
            ->andWhere('ci.isBigCity = 1 and ci.isCapital = 1 and ci.isDistrict = 0')
            ->getQuery()->getOneOrNullResult();
    }

    public function getBigCitiesWithActiveFeaturedProfessionals()
    {
        return $this->createQueryBuilder('ci')
            ->join('ci.professionals', 'p', Join::WITH, ':now between p.featuredFrom and p.featuredTo')
            ->andWhere('ci.isBigCity = 1')
            ->setParameter('now', new \DateTime('now'))
            ->distinct()
            ->orderBy('ci.isCapital', 'desc')
            ->addOrderBy('ci.name')
            ->getQuery()->getResult();
    }

    public function getClosestBigCityWithActiveFeaturedProfessionals(LocationRequest $request)
    {
        return $this->createQueryBuilder('ci')
            ->select('ci.name')
            ->addSelect('acos(
                  cos(radians( :latitude ))
                * cos(radians( ci.latitude ))
                * cos(radians( :longitude ) - radians( ci.longitude ))
                + sin(radians( :latitude ))
                * sin(radians( ci.latitude ))
              ) distance')
            ->join('ci.professionals', 'p', Join::WITH, ':now between p.featuredFrom and p.featuredTo')
            ->setParameter('now', new \DateTime('now'))
            ->setParameter('latitude', $request->latitude)
            ->setParameter('longitude', $request->longitude)
            ->andWhere('ci.isBigCity = 1')
            ->orderBy('distance')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();
    }
}
