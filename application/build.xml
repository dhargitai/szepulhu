<?xml version="1.0" encoding="UTF-8"?>
<project name="szepul.hu" basedir="." default="build:main">
    <!-- Properties -->
    <property name="dir.app" value="${project.basedir}/app" />
    <property name="dir.bin" value="${project.basedir}/bin" />
    <property name="dir.src" value="${project.basedir}/src" />
    <property name="dir.build" value="${project.basedir}/app/build" />
    <property name="dir.docs" value="${dir.build}/docs" />
    <property name="dir.docs.phpdoc" value="${dir.docs}/phpdoc" />
    <property name="dir.reports" value="${dir.build}/logs" />
    <property name="dir.reports.pdepend" value="${dir.reports}/pdepend" />
    <property name="dir.reports.coverage" value="${dir.reports}/coverage" />
    <property name="threads" value="4" />

    <!-- Filesets -->
    <fileset id="sourcecode" dir="${project.basedir}">
        <include name="src/**/*.php" />
        <include name="app/Resources/**/*.php" />
    </fileset>
    <fileset id="javascript_code" dir="${project.basedir}">
        <include name="src/**/*.js" />
        <include name="app/Resources/**/*.js" />
    </fileset>

    <!-- Default target -->
    <target name="build:main"
            depends="build:clean, build:check, build:test, build:doc"
            description="Run all test and build everything" />

    <!-- Doc target -->
    <target name="build:doc"
            depends="build:prepare, doc:phpdoc"
            description="Generates app API documentation." />

    <!-- Check target -->
    <target name="build:check"
            depends="build:prepare"
            description="Analyzes app code.">
        <parallel threadCount="${threads}">
            <phingcall target="check:cs"/>
            <phingcall target="check:md"/>
            <phingcall target="check:cpd"/>
            <phingcall target="check:depend"/>
            <phingcall target="check:jshint"/>
        </parallel>
    </target>

    <!-- Test target -->
    <target name="build:test"
            depends="build:prepare"
            description="Executes all tests..">
        <parallel threadCount="${threads}">
            <phingcall target="test:unit"/>
            <phingcall target="test:acceptance"/>
        </parallel>
    </target>

    <!-- Project build clean -->
    <target name="build:clean" description="Clean up build directories.">
        <echo msg="Cleaning build directories ..." />
        <delete dir="${dir.build}" verbose="true" />
    </target>

    <!-- Project build prepare -->
    <target name="build:prepare" description="Create build directories." hidden="true">
        <echo msg="Creating build directories ..." />
        <mkdir dir="${dir.build}" />
        <mkdir dir="${dir.docs}" />
        <mkdir dir="${dir.docs.phpdoc}" />
        <mkdir dir="${dir.reports}" />
        <mkdir dir="${dir.reports.coverage}" />
        <mkdir dir="${dir.reports.pdepend}" />
    </target>

    <!-- PHPDOC API documentation target -->
    <target name="doc:phpdoc" description="Generate API documentation.">
        <echo msg="Generating API documentation with PHPDoc..." />
        <phpdoc2 title="${phing.project.name} :: API Documentation"
                destdir="${dir.docs.phpdoc}"
                defaultPackageName="${phing.project.name}">
            <fileset refid="sourcecode" />
        </phpdoc2>
    </target>


    <!-- Symfony2 code sniffer -->
    <target name="check:cs" description="Checks coding standard.">
        <echo msg="Checking coding standard ..." />
        <phpcodesniffer standard="Symfony2"
                        showSniffs="true"
                        showWarnings="true"
                        haltonerror="false">
            <config name="installed_paths" value="vendor/escapestudios/symfony2-coding-standard"/>
            <fileset refid="sourcecode" />
            <formatter type="checkstyle" outfile="${dir.reports}/checkstyle.xml" />
        </phpcodesniffer>
    </target>

    <!-- copy/paste detector -->
    <target name="check:cpd" description="Checks similar code blocks.">
        <echo msg="Checking similar code blocks ..." />
        <phpcpd>
            <fileset refid="sourcecode" />
            <formatter type="pmd" outfile="${dir.reports}/pmd-cpd.xml" />
        </phpcpd>
    </target>

    <!-- Mess detector -->
    <target name="check:md" description="Generate code metrics.">
        <echo msg="Generating code metrics ..." />
        <phpmd rulesets="codesize,unusedcode">
            <fileset refid="sourcecode" />
            <formatter type="xml" outfile="${dir.reports}/pmd.xml" />
        </phpmd>
    </target>

    <!-- Code dependency -->
    <target name="check:depend" description="Checks coupling and dependency.">
        <echo msg="Checking coupling and dependency ..." />
        <phpdepend>
            <fileset refid="sourcecode" />
            <logger type="jdepend-xml" outfile="${dir.reports.pdepend}/jdepend.xml" />
            <logger type="jdepend-chart" outfile="${dir.reports.pdepend}/dependencies.svg" />
            <logger type="overview-pyramid" outfile="${dir.reports.pdepend}/overview-pyramid.svg" />
        </phpdepend>
    </target>

    <target name="check:jshint" description="Check the syntax on JavaScript source code files.">
        <echo msg="Checking syntax errors in JavaScript source code ..." />
        <jshint haltOnError="true" reporter="jshint" checkStyleReportPath="${dir.reports}/jshint.xml">
            <fileset refid="javascript_code"/>
        </jshint>
    </target>

    <!-- Unit tests -->
    <target name="test:unit" description="Executes unit tests.">
        <echo msg="Running unit tests ..." />
        <exec command="${dir.bin}/phpspec -n run --format=pretty --stop-on-failure --no-code-generation | tee ${dir.reports}/phpspec.log" checkreturn="true" outputProperty="output.phpspec"/>
        <echo msg="Results: ${output.phpspec}"/>
    </target>

    <!-- Acceptance tests -->
    <target name="test:acceptance" description="Executes acceptance tests.">
        <echo msg="Running acceptance tests ..." />
        <exec command="${dir.bin}/behat --format=teamcity --no-snippets --strict --no-interaction --stop-on-failure | tee ${dir.reports}/behat.log" checkreturn="true" outputProperty="output.behat"/>
        <echo msg="Results: ${output.behat}"/>
    </target>

</project>